generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid()) @db.Uuid
  username        String    @unique
  email           String    @unique
  password        String
  name            String?
  profileImage    String?
  backgroundImage String?
  bio             String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  refreshTokens   RefreshToken[]
  posts           Post[]
  mediaFile       MediaFile[]
  reaction        Reaction[]
  following Follow[] @relation("follower")
  followers Follow[] @relation("following")
  badges UserBadge[]
  sentMessages     Message[] @relation("MessageToSender")
  receivedMessages Message[] @relation("MessageToRecipient")
}
model Reaction {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String    @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
  postId    String    @db.Uuid
  post      Post      @relation(fields: [postId], references: [id])
  type      ReactionType
}

enum ReactionType {
  LIKE
  DISLIKE
}

model RefreshToken {
  id        String    @id @default(uuid()) @db.Uuid
  token     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String    @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
}

model Post {
  id          String    @id @default(uuid()) @db.Uuid
  text        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.Uuid
  reaction        Reaction[]
  replyToId   String?   @db.Uuid
  replyTo     Post?     @relation("replies", fields: [replyToId], references: [id])
  replies     Post[]    @relation("replies")
  mediaFile   MediaFile[]
}

model MediaFile {
  id              String    @id @default(uuid()) @db.Uuid
  url             String
  providerPublicId String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String    @db.Uuid
  user            User      @relation(fields: [userId], references: [id])
  post            Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          String?   @db.Uuid
}

model Follow {
  id          String @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  followerId  String @db.Uuid
  follower    User @relation("follower", fields: [followerId], references: [id])
  followingId String @db.Uuid
  following   User @relation("following", fields: [followingId], references: [id])
}

model Badge {
  id        String      @id @default(uuid()) @db.Uuid
  name      String
  imageUrl  String
  users     UserBadge[]
}

model UserBadge {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  badgeId   String   @db.Uuid
  badge     Badge    @relation(fields: [badgeId], references: [id])

  @@id([userId, badgeId])
}

model Message {
  id          String    @id @default(uuid()) @db.Uuid
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  senderId    String    @db.Uuid
  sender      User      @relation("MessageToSender", fields: [senderId], references: [id])
  recipientId String    @db.Uuid
  recipient   User      @relation("MessageToRecipient", fields: [recipientId], references: [id])
}

